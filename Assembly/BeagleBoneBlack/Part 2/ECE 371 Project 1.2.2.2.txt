@ This code is coppied from Microprocessor System Design by Doug Hall Chapter 5 Figure 5-18 pg. 243-246
@ The code is ARM Assembly for a button/serviceLED.
@ The point of this project is to discover the processor interupts and how to use them
@ Specifically this code applies the IRQ and SVC executions.

@ Note: My changes for part 2 are labeled with a @<-- 

@ ECE 371 Project 1.2.1
@ Josh Horejs 12/5/2020
@
@								Discription
@ Using a external input button on pin GPIO1_30, triggers the onboard LED0 aka
@ GPIO1_21 for a arithmetic countdown starting at 0x00400000. The interupt process is compmleted using the ARM structure interupt IRQ. Once the
@ this IRQ push button is recognized a logical count down starts at 0x00400000 - 1 per clock until 0 then.

@ Note: INT_DIRECTOR modifies the Startup_ARMCA8 file using b loop interrup at ~

.text
.global _start
.global INT_DIRECTOR
_start:

@ 
	LDR R13, =STACK1			@ Point to the base of the STACK for SVC mode
	ADD R13, R13, #0x1000		@ Point to the top of the STACK
	CPS #0x12					@ Switch to IRQ mode
@
	LDR R13, =STACK2			@ Point to IRQ stack
	ADD R13, R13, #0x1000		@ Point to top of STACK
	CPS #0x13					@ Back to SVC mode

@ Turn on GPIO1 CLK by using the enable value 0x02 and GPIO1_CLCKCTRL
	LDR R0, =0x02				@ Value to enable clock for GPIO modules
	LDR R1, =0x44E000AC			@ Load to R1 address of CM_PER_GPIO1_CLCKCTRL registers
	STR R0, [R1]				@ Write hex word 0x02 to R1 (CM_PER_GPIO1_CLCKCTRL) for R1=0x4804C134

@ Initialize the output bit as off with CLEARDATAOUT 190 R4 ADDED to R0. Best practices for safety etc
	LDR R0, =0x4804C000			@ GPIO1 OE register to R0=0x4804C00
	ADD R4, R0, #0x190			@ 190 is the GPIO1_CLEARDATAOUT register, R4=0x4804C190
	MOV R7, #0x002000000@<--		@ Load 1 to set bit GPIO1_21 turning off LED0
	STR R7, [R4]				@ Write to GPIO1 output enable register

@ Program GPIO1_21 as output using GPIO1_OE address 0x134 
	ADD R1, R0, #0x0134			@ Add GPIO1_OE register address 0x134 to
	LDR R6, [R1]				@ Read current GPIO1 Output Enable register
	LDR R7, =0xFE1FFFFF@<--			@ Word to enable GPIO1_30 as output(0 enables)
	AND R6, R7, R6				@ Clear bit 21-24
	STR R6, [R1]				@ Write to GPIO1_OE output enable register

@@@@@@@
@ Detect falling edge on GPIO1_30 and enable to assert POINTEREND1
	ADD R1, R0, #0x14C			@ R1 = address of GIO1_FALLINGDETECT register
	MOV R2, #0x40000000@<--			@ Load value for bit GPIO1_30 (1 enables See Table 3)
	LDR R3, [R1]				@ read GPIO1_FALLINGDETECT register
	ORR R3, R3, R2				@ Modify (set GPIO1_30 )
	STR R3, [R1]				@ Write back to
	ADD R1, R0, #0x34			@ Address of GPIO1_IRQSTATUS_SET_0 register
	STR R2, [R1]				@ Enable GPIO1_30 request on POINTERPEND1

@@@@@@@
@ Initialize INTC
	LDR R1, =0x482000E8			@ Address of INTC_MIR_CLEAR3 register
	MOV R2, #0x04				@ Value to unmask INTC INT 98, GPIOINT1A
	STR R2, [R1]				@ Write to INTC_MIR_CLEAR3 register

@ Make sure processor IRQ enabled in CPSR
	MRS R3, CPSR				@ Copy CPSR to R3
	BIC R3, #0x80				@ Clear bit 7
	MSR CPSR_c, R3				@ Write back cleared bit 7 to CPSR_c

@ Wait for interrupt
LOOP: NOP					@ wait Loop
	B LOOP					@ break point for loop
INT_DIRECTOR:					@ Defining the INT_DIRECTOR for implementation in the startup file
	STMFD SP!, {R0-R3, LR}			@ Push registers on stack
	LDR R0, =0x482000F8			@ Address of INTC-PENDINGIRQ3
	LDR R1, [R0]				@ Read INTC-Pending_IRQ3 register
	TST R1, #0x00000004			@ Test BIT 2
	BEQ PASS_ON				@ Not from GPIOINT1A, go back to wait loop, else
	LDR R0, =0x4804C02C			@ Load GPIO1_IRQSTATUS_0 register address
	LDR R1, [R0]				@ Read STATUS register
	LDR R1, =0x40000000@<---		@ Check if bit 30 = 1? Changed From TST,dont know why this worked?
	BNE BUTTON_SVC				@ Iff bit 30 = 1, button was pushed/Vcc=~0
	BEQ PASS_ON				@ Iff bit 30 = 0, go back back to LOOP

PASS_ON:					@
	LDMFD SP!, {R0-R3, LR}			@ Rester registers
	SUBS PC, LR, #4				@ Pass execution on to wait LOOP

BUTTON_SVC:					@ Supervisor control interupt execution tag
	MOV R1, #0x40000000@<--			@ Hex word to deactivate GPIO1_30(button) interupt request
						@ Also turns off INTC interrupt request
	STR R1, [R0]				@ Write to GPIO1_IRQSTATUS_0 register

@Turn off NEWIRQA bit in INTC_CONTROL, so processor can respond to new IRQ
	LDR R0, =0x48200048			@ Address of the INTC_CONTROL register
	MOV R1, #01					@ Value to clear bit 0
	STR R1, [R0]				@ Write to INTC_CONTROL register

@ Turn on LED0 GPIO1_21 Code from part 1
	LDR R0, =0x4804C194			@ Load address of GPIO1_SETDATAOUT register
	MOV R1, #0x00200000@<--			@ Load value to turn on GPIO1_21(LED0)
	STR R1, [R0]				@ Write to GPIO1_SETDATAOUT register

@ Wait 2 seconds
	MOV R2, #0x00400000			@ Hex word for delay based on clock frequency
CLK:			   @<--			@ loop for 2 sec countdown clock
	NOP					@
	SUBS R2, #1				@ arithmetic subtract 1 from R2
BNE CLK			   @<--			@

@turn off LED0 on GPIO1_21
	LDR R0, =0x4804C190			@ Loads address of GPIO1_CLEARDATAOUT to R0
	STR R1, [R0]				@ Write 0x0020000 to GPIO1_CLEARDATAOUT

@Return to wait loop, LOOP:
	LDMFD SP!, {R0-R3, LR}			@ Restore registers
	SUBS PC, LR, #4				@ Return from IRQ interrupt procedure
						@ by subtracting 4 from

.align 2					@
SYS_IRQ: .WORD 0				@ Location to store system IRQ address
.data						@
.align 2					@
STACK1: .rept 1024				@
		.word 0x0000			@
		.endr				@
STACK2: .rept 1024				@
		.word 0x0000			@
		.endr				@
.END						@
